AWSTemplateFormatVersion: '2010-09-09'
Description: Example for HTTP API
Transform: AWS::Serverless-2016-10-31
Parameters:
  ParamSwaggerBucket:
    Type: String
  ParamSwaggerKey:
    Type: String
Resources:
  ########################################
  # API Gateway
  ########################################
  ExampleAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  ExampleApiHttp:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub 's3://${ParamSwaggerBucket}/${ParamSwaggerKey}'
      FailOnWarnings: true
  ExampleApiStageDev:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt ExampleAccessLogs.Arn
        Format: $context.requestId
      ApiId: !Ref ExampleApiHttp
      AutoDeploy: true
      # DeploymentId: !Ref ExampleApiDeploymentDev
      Description: development
      StageName: dev
  # ExampleApiDeploymentDev:
  #   Type: AWS::ApiGatewayV2::Deployment
  #   Properties:
  #     ApiId: !Ref ExampleApiHttp
  #     StageName: dev
  # ExampleApiIntegrationProfile:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref ExampleApiHttp
  #     IntegrationMethod: POST
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExampleFnProfile.Arn}/invocations'
  #     PayloadFormatVersion: 2.0
  # ExampleApiRouteProfile:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref ExampleApiHttp
  #     ApiKeyRequired: false
  #     AuthorizationType: NONE
  #     RouteKey: 'GET /profile'
  #     Target: !Sub '/integrations/${ExampleApiIntegrationProfile}'

  ########################################
  # Lambda
  ########################################
  ExampleExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:*'
  ExampleFnProfile:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: profile.handler
      Role: !GetAtt ExampleExecRole.Arn
      Runtime: python3.8
      Timeout: 60
  ExampleLogGroupProfile:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ExampleFnProfile}"
      RetentionInDays: 7
  ExamplePermProfile:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ExampleFnProfile.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExampleApiHttp}/*/*/*'
Outputs:
  OutExampleApiHttpId:
    Value: !Ref ExampleApiHttp
  OutExampleApiHttpUrl:
    Value: !Sub 'https://${ExampleApiHttp}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
